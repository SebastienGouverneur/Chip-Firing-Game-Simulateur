package view;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.util.Observable;
import java.util.Observer;

import org.graphstream.graph.Graph;
import org.graphstream.ui.view.View;
import org.graphstream.ui.view.Viewer;
import org.graphstream.ui.view.Viewer.ThreadingModel;

import core.Cfg;

import model.ModelGraphTrans;

public class ViewGraphTrans extends javax.swing.JFrame implements Observer {
	
	private ModelGraphTrans modelGraphTrans;
	private Dimension preferredSize = new Dimension(400, 400); 
	//private Graph graph = Cfg.getInstance().getGraphTrans().getCurrentGraph();
	private Viewer viewer;
	private View view;
	
	public ViewGraphTrans() {
		initComponents();
	}

	public ViewGraphTrans(ModelGraphTrans modelGraphTrans) {
		this.viewer = Cfg.getInstance().getGraphTrans().getViewer();
		this.view = viewer.getDefaultView();
		initComponents();
		this.modelGraphTrans = modelGraphTrans;
		viewGraph.add(modelGraphTrans.getViewer().addDefaultView(false));
		actionZoomPerformed();
	}
	
	public View getView() {
		return view;
	}

	public void actionZoomPerformed() {
		viewGraph.addMouseWheelListener(new MouseWheelListener() {

			@Override
			public void mouseWheelMoved(MouseWheelEvent e) {
				int notches = e.getWheelRotation();
				if (notches < 0) {
					//getView().getCamera().setViewPercent(0.5)
					System.out.println("up");
				} else {
					System.out.println("down");
				}
			}
		});
	}
	
	@Override
	public void update(Observable o, Object o1) {
		modelGraphTrans.pump();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		viewGraph = new javax.swing.JPanel();

		setMinimumSize(new java.awt.Dimension(800, 600));

		viewGraph.setBorder(null);
		viewGraph.setLayout(new java.awt.BorderLayout());

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(viewGraph,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE).addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(viewGraph,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE).addContainerGap()));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel viewGraph;
	// End of variables declaration//GEN-END:variables
}